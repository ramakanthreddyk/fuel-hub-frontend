openapi: 3.0.0
info:
  title: FuelSync Hub API
  version: 1.0.0
servers:
- url: /api/v1
paths:
  /api/v1/auth/login:
    post:
      summary: User login and JWT issuance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LoginResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/admin/auth/login:
    post:
      summary: SuperAdmin login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LoginResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/auth/logout:
    post:
      summary: User logout
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        default:
          $ref: '#/components/responses/Error'
  /api/v1/auth/refresh:
    post:
      summary: Refresh JWT token
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LoginResponse'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/users:
    post:
      summary: Create tenant user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/Error'
    get:
      summary: List tenant users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/users/{userId}:
    get:
      summary: Get user details
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
    put:
      summary: Update tenant user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        default:
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete tenant user
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '409':
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/users/{userId}/change-password:
    post:
      summary: Change user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        default:
          $ref: '#/components/responses/Error'
  /api/v1/users/{userId}/reset-password:
    post:
      summary: Reset user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
        default:
          $ref: '#/components/responses/Error'
  /api/v1/stations:
    post:
      summary: Create station
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStationRequest'
      responses:
        '201':
          description: Station created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
        default:
          $ref: '#/components/responses/Error'
    get:
      summary: List stations
      responses:
        '200':
          description: List of stations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Station'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/stations/{stationId}:
    get:
      summary: Get details for a single station
      parameters:
        - name: stationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Station details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Station'
    put:
      summary: Update station
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStationRequest'
      responses:
        '200':
          description: Station updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Station'
        default:
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete station
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '409':
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/stations/{stationId}/metrics:
    get:
      summary: Station metrics summary
      parameters:
        - name: stationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/stations/{stationId}/performance:
    get:
      summary: Station performance comparison
      parameters:
        - name: stationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/stations/{stationId}/efficiency:
    get:
      summary: Get station efficiency metrics
      parameters:
        - name: stationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/pumps:
    post:
      summary: Create pump
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePumpRequest'
    get:
      summary: List pumps
      description: Returns pumps with `nozzleCount` per pump.
      parameters:
        - name: stationId
          in: query
          required: false
          schema:
            type: string
          description: Filter pumps by station ID
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/pumps/{id}:
    get:
      summary: Get pump details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Update pump
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePumpRequest'
    delete:
      summary: Delete pump
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/pumps/{id}/settings:
    get:
      summary: Get pump settings
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Update pump settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/nozzles:
    post:
      summary: Create nozzle
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '409':
          $ref: '#/components/responses/Error'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNozzleRequest'
    get:
      summary: List nozzles
      parameters:
        - name: pumpId
          in: query
          required: false
          schema:
            type: string
          description: Filter nozzles by pump ID
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/nozzles/{id}:
    get:
      summary: Get nozzle details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Update nozzle
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNozzleRequest'
    delete:
      summary: Delete nozzle
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/nozzles/{id}/settings:
    get:
      summary: Get nozzle settings
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Update nozzle settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/nozzle-readings:
    post:
      summary: Record nozzle reading and generate sale
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nozzleId:
                  type: string
                reading:
                  type: number
                recordedAt:
                  type: string
                  format: date-time
                creditorId:
                  type: string
                  nullable: true
                paymentMethod:
                  type: string
                  enum:
                  - cash
                  - card
                  - upi
                  - credit
                  description: 'Optional. Currently the API infers ''cash'' or ''credit''
                    based on

                    `creditorId`. Support for `card` and `upi` is planned.

                    '
              required:
              - nozzleId
              - reading
              - recordedAt
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    get:
      summary: List nozzle readings
      parameters:
        - name: nozzleId
          in: query
          required: false
          schema:
            type: string
          description: Filter by nozzle ID
        - name: startDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Start of date range
        - name: endDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: End of date range
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/nozzle-readings/can-create/{nozzleId}:
    get:
      summary: Check if a nozzle reading can be created
      parameters:
        - name: nozzleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/fuel-prices:
    post:
      summary: Create fuel price entry
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    get:
      summary: List fuel prices
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/fuel-prices/validate/{stationId}:
    get:
      summary: Validate fuel prices for a station
      parameters:
        - name: stationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/fuel-prices/missing:
    get:
      summary: List stations missing active prices
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/fuel-prices/{id}:
    put:
      summary: Update fuel price
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    delete:
      summary: Delete fuel price
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/alerts:
    get:
      summary: List alerts
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    post:
      summary: Create alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlertRequest'
      responses:
        '201':
          description: Alert created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Alert'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/alerts/summary:
    get:
      summary: Alert counts by severity
      responses:
        '200':
          description: Counts of unread alerts grouped by severity
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AlertSummary'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/alerts/{id}:
    delete:
      summary: Delete an alert by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Alert deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: boolean
  /api/v1/alerts/{id}/read:
    patch:
      summary: Mark alert read
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /api/v1/analytics/station-comparison:
    get:
      summary: Station comparison metrics
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/analytics/hourly-sales:
    get:
      summary: Get hourly sales metrics for a station
      parameters:
        - name: stationId
          in: query
          required: true
          schema:
            type: string
        - name: dateFrom
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Hourly sales data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HourlySalesMetric'
  /api/v1/analytics/peak-hours:
    get:
      summary: Get peak sales hours for a station
      parameters:
        - name: stationId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Peak hours
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PeakHourMetric'
  /api/v1/analytics/fuel-performance:
    get:
      summary: Get fuel performance for a station
      parameters:
        - name: stationId
          in: query
          required: true
          schema:
            type: string
        - name: dateFrom
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Fuel performance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FuelPerformanceMetric'
  /api/v1/reports/sales:
    get:
      summary: Get sales report
      parameters:
        - name: stationId
          in: query
          schema:
            type: string
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Sales data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SalesReportData'
                  summary:
                    $ref: '#/components/schemas/SalesReportSummary'
    post:
      summary: Export sales report
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportReportRequest'
  /api/v1/reports/export:
    post:
      summary: Export report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportReportRequest'
      responses:
        '200':
          description: Report file
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    description: Base64 encoded export content
        default:
          $ref: '#/components/responses/Error'
  /api/v1/reports/schedule:
    post:
      summary: Schedule report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleReportRequest'
      responses:
        '200':
          description: Report scheduled
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
  /api/v1/creditors:
    post:
      summary: Create creditor
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    get:
      summary: List creditors
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/creditors/{id}:
    get:
      summary: Get creditor details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Creditor details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Creditor'
    put:
      summary: Update creditor
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    delete:
      summary: Delete creditor
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/credit-payments:
    post:
      summary: Record credit payment
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    get:
      summary: List credit payments
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/fuel-deliveries:
    post:
      summary: Record fuel delivery
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    get:
      summary: List fuel deliveries
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/sales:
    get:
      summary: List sales records
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/sales/analytics:
    get:
      summary: Sales aggregation metrics
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/reconciliation:
    get:
      summary: Get reconciliation history
      parameters:
        - name: stationId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Reconciliation records
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReconciliationRecord'
    post:
      summary: Run daily reconciliation
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReconciliationRequest'
  /api/v1/reconciliation/{stationId}:
    get:
      summary: Get reconciliation summary
      parameters:
        - name: stationId
          in: path
          required: true
          schema:
            type: string
        - name: date
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/reconciliation/{id}/approve:
    post:
      summary: Approve reconciliation record
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/reconciliation/daily-summary:
    get:
      summary: Daily nozzle reading summary
      parameters:
        - name: stationId
          in: query
          description: Station identifier
          required: true
          schema:
            type: string
        - name: date
          in: query
          description: ISO date (YYYY-MM-DD) to summarise
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DailyReadingSummary'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/dashboard/sales-summary:
    get:
      summary: Dashboard sales summary
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/dashboard/payment-methods:
    get:
      summary: Dashboard payment method breakdown
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/dashboard/fuel-breakdown:
    get:
      summary: Dashboard fuel breakdown
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/dashboard/fuel-types:
    get:
      deprecated: true
      summary: Legacy fuel breakdown
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/dashboard/top-creditors:
    get:
      summary: Dashboard top creditors
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/dashboard/station-metrics:
    get:
      summary: Dashboard station metrics
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/dashboard/sales-trend:
    get:
      summary: Dashboard sales trend
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/dashboard/daily-trend:
    get:
      deprecated: true
      summary: Legacy sales trend
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/dashboard/system-health:
    get:
      summary: Get system health metrics
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/tenants:
    get:
      summary: List tenants
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    post:
      summary: Create tenant
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /api/v1/admin/dashboard:
    get:
      summary: Retrieve admin dashboard metrics
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/admin/plans:
    post:
      summary: Create subscription plan
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    get:
      summary: List subscription plans
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/admin/plans/{id}:
    get:
      summary: Get plan info
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Update plan
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    delete:
      summary: Delete plan
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/admin/users/{id}:
    get:
      summary: Get admin user
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Update admin user
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    delete:
      summary: Delete admin user
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/admin/users/{id}/reset-password:
    post:
      summary: Reset admin password
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /api/v1/admin/tenants/{id}:
    get:
      summary: Get tenant info
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    delete:
      summary: Delete tenant
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/admin/tenants/{id}/status:
    patch:
      summary: Update tenant status
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object

  /api/v1/admin/tenants/{tenantId}/settings:
    get:
      summary: List tenant settings
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/admin/tenants/{tenantId}/settings/{key}:
    get:
      summary: Get tenant setting
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    put:
      summary: Update tenant setting
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
  /api/v1/analytics/dashboard:
    get:
      summary: Tenant dashboard metrics
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/analytics/superadmin:
    get:
      summary: Super admin analytics dashboard
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/analytics/tenant/{id}:
    get:
      summary: Analytics for specific tenant
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/auth/test:
    get:
      summary: Verify auth token validity
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/fuel-deliveries/inventory:
    get:
      summary: Fuel stock after deliveries
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/fuel-inventory:
    get:
      summary: List current fuel inventory
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/fuel-inventory/summary:
    get:
      summary: Fuel inventory totals by fuel type
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/inventory:
    get:
      summary: Current part inventory
      responses:
        '200':
          description: Inventory items
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InventoryItem'
              example:
                data:
                  - id: "inv1"
                    stationId: "st1"
                    stationName: "Station A"
                    fuelType: "petrol"
                    currentStock: 800
                    minimumLevel: 500
                    lastUpdated: "2025-11-28T10:00:00Z"
                    stockStatus: "medium"
        default:
          $ref: '#/components/responses/Error'
  /api/v1/inventory/alerts:
    get:
      summary: Low stock alerts
      responses:
        '200':
          description: Inventory alerts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Alert'
              example:
                data:
                  - id: "al1"
                    stationId: "st1"
                    stationName: "Station A"
                    alertType: "low_inventory"
                    message: "Low petrol inventory"
                    severity: "warning"
                    isRead: false
                    createdAt: "2025-11-28T09:00:00Z"
        default:
          $ref: '#/components/responses/Error'
  /api/v1/inventory/update:
    post:
      summary: Update inventory counts
      responses:
        '200':
          description: Update status
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: success
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryUpdateRequest'
  /api/v1/reports/financial/export:
    get:
      summary: Export financial report
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/reports/sales/export:
    get:
      summary: Export sales report
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/tenant/settings:
    get:
      summary: Retrieve tenant settings and feature flags
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    post:
      summary: Update tenant settings or feature flag
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /api/v1/settings:
    get:
      deprecated: true
      summary: Legacy tenant settings
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    post:
      deprecated: true
      summary: Legacy update tenant settings
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /api/v1/setup-status:
    get:
      summary: Check tenant setup status
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/stations/compare:
    get:
      summary: Compare station performance
      responses:
        '200':
          description: Station comparison metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StationComparison'
              example:
                data:
                  - id: "st1"
                    stationName: "Station A"
                    sales: 12000
                    volume: 4500
                    transactions: 200
                    growth: 5
        default:
          $ref: '#/components/responses/Error'
  /api/v1/stations/ranking:
    get:
      summary: Station ranking report
      responses:
        '200':
          description: Ranked station metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StationRanking'
              example:
                data:
                  - rank: 1
                    id: "st1"
                    name: "Station A"
                    sales: 15000
                    volume: 5000
                    transactionCount: 220
        default:
          $ref: '#/components/responses/Error'
  /api/docs/swagger.json:
    get:
      summary: Serve raw OpenAPI spec
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /test:
    get:
      summary: Echo test endpoint
      x-internal: true
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    post:
      summary: Echo test POST
      x-internal: true
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /test-login:
    post:
      summary: Login helper for tests
      x-internal: true
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /health:
    get:
      summary: Health check
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /schemas:
    get:
      summary: List tenant schemas (non-production)
      x-internal: true
      description: |
        Development utility for viewing or resetting demo tables.
        When `NODE_ENV` is `production` the endpoint is authenticated and
        returns a 403 response without touching the database.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/admin/users:
    post:
      summary: Create super admin user
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    get:
      summary: List super admin users
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/admin/tenants:
    get:
      summary: List tenants
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
    post:
      summary: Create tenant
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /api/v1/admin/tenants/summary:
    get:
      summary: Get tenant metrics summary
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/admin/analytics:
    get:
      summary: Super admin analytics
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/attendant/stations:
    get:
      summary: List stations for attendant
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/attendant/pumps:
    get:
      summary: List pumps for attendant
      parameters:
        - name: stationId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/attendant/nozzles:
    get:
      summary: List nozzles for attendant
      parameters:
        - name: pumpId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/attendant/creditors:
    get:
      summary: List creditors for attendant
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/attendant/cash-report:
    post:
      summary: Submit daily cash total and credit sales breakdown
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stationId:
                  type: string
                date:
                  type: string
                  format: date
                cashAmount:
                  type: number
                creditEntries:
                  type: array
                  items:
                    type: object
                    properties:
                      creditorId:
                        type: string
                      fuelType:
                        type: string
                        enum: [petrol, diesel]
                      litres:
                        type: number
                      amount:
                        type: number
                    required: [creditorId, fuelType]
              required:
                - stationId
                - date
      responses:
        '201':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/attendant/cash-reports:
    get:
      summary: List cash reports
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/attendant/alerts:
    get:
      summary: List attendant alerts
      parameters:
        - name: stationId
          in: query
          required: false
          schema:
            type: string
        - name: unreadOnly
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  /api/v1/attendant/alerts/{id}/acknowledge:
    put:
      summary: Acknowledge alert
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        default:
          $ref: '#/components/responses/Error'
  components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    tenantHeader:
      type: apiKey
      in: header
      name: x-tenant-id

  responses:
    Success:
      description: Success response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: object
              message:
                type: string
    Error:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: string
    NotFound:
      description: Route not found
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string

  schemas:
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string
            role:
              type: string
              enum: [superadmin, owner, manager, attendant]
            tenantId:
              type: string
            tenantName:
              type: string
    Alert:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [inventory, credit, maintenance, sales, system]
        severity:
          type: string
          enum: [info, warning, critical]
        title:
          type: string
        message:
          type: string
        stationId:
          type: string
        stationName:
          type: string
        isRead:
          type: boolean
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        metadata:
          type: object
    StationComparison:
      type: object
      properties:
        id:
          type: string
        stationName:
          type: string
        sales:
          type: number
        volume:
          type: number
        transactions:
          type: number
        growth:
          type: number
    HourlySales:
      type: object
      properties:
        hour:
          type: string
        sales:
          type: number
        volume:
          type: number
        transactions:
          type: number
    PeakHour:
      type: object
      properties:
        timeRange:
          type: string
        avgSales:
          type: number
        avgVolume:
          type: number
    FuelPerformance:
      type: object
      properties:
        fuelType:
          type: string
        volume:
          type: number
        sales:
          type: number
        margin:
          type: number
        growth:
          type: number
    StationMetric:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        todaySales:
          type: number
        monthlySales:
          type: number
        salesGrowth:
          type: number
        activePumps:
          type: number
        totalPumps:
          type: number
        status:
          type: string
          enum: [active, inactive, maintenance]
        lastActivity:
          type: string
        efficiency:
          type: number
    StationRanking:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sales:
          type: number
        volume:
          type: number
        growth:
          type: number
        efficiency:
          type: number
        rank:
          type: number
    SuperAdminAnalytics:
      type: object
      properties:
        totalTenants:
          type: number
        activeTenants:
          type: number
        totalStations:
          type: number
        salesVolume:
          type: number
        totalRevenue:
          type: number
        monthlyGrowth:
          type: array
          items:
            type: object
            properties:
              month:
                type: string
              tenants:
                type: number
              revenue:
                type: number
        topTenants:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              stationsCount:
                type: number
              revenue:
                type: number
    Creditor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contactNumber:
          type: string
        address:
          type: string
        status:
          type: string
          enum: [active, inactive]
        createdAt:
          type: string
          format: date-time
        partyName:
          type: string
        creditLimit:
          type: number
        currentOutstanding:
          type: number
    CreateCreditorRequest:
      type: object
      required: [partyName]
      properties:
        partyName:
          type: string
        creditLimit:
          type: number
    CreditPayment:
      type: object
      properties:
        id:
          type: string
        creditorId:
          type: string
        amount:
          type: number
        paymentMethod:
          type: string
          enum: [cash, bank_transfer, check]
        referenceNumber:
          type: string
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
    CreatePaymentRequest:
      type: object
      required: [creditorId, amount, paymentMethod]
      properties:
        creditorId:
          type: string
        amount:
          type: number
        paymentMethod:
          type: string
          enum: [cash, bank_transfer, check]
        referenceNumber:
          type: string
        notes:
          type: string
    SalesSummary:
      type: object
      properties:
        totalSales:
          type: number
        totalVolume:
          type: number
        transactionCount:
          type: number
        totalProfit:
          type: number
        profitMargin:
          type: number
        period:
          type: string
    PaymentMethodBreakdown:
      type: object
      properties:
        paymentMethod:
          type: string
        amount:
          type: number
        percentage:
          type: number
    FuelTypeBreakdown:
      type: object
      properties:
        fuelType:
          type: string
        volume:
          type: number
        amount:
          type: number
    TopCreditor:
      type: object
      properties:
        id:
          type: string
        partyName:
          type: string
        outstandingAmount:
          type: number
        creditLimit:
          type: number
    DailySalesTrend:
      type: object
      properties:
        date:
          type: string
        amount:
          type: number
        volume:
          type: number
    FuelDelivery:
      type: object
      properties:
        id:
          type: string
        stationId:
          type: string
        stationName:
          type: string
        fuelType:
          type: string
          enum: [petrol, diesel, premium]
        volume:
          type: number
        deliveryDate:
          type: string
          format: date-time
        supplier:
          type: string
        createdAt:
          type: string
          format: date-time
    CreateFuelDeliveryRequest:
      type: object
      required: [stationId, fuelType, volume, deliveryDate]
      properties:
        stationId:
          type: string
        stationName:
          type: string
        fuelType:
          type: string
          enum: [petrol, diesel, premium]
        volume:
          type: number
        deliveryDate:
          type: string
          format: date-time
        supplier:
          type: string
    FuelInventory:
      type: object
      properties:
        id:
          type: string
        stationId:
          type: string
        stationName:
          type: string
        fuelType:
          type: string
          enum: [petrol, diesel, premium]
        capacity:
          type: number
        currentVolume:
          type: number
        lastUpdated:
          type: string
          format: date-time
    InventoryItem:
      type: object
      properties:
        id:
          type: string
        stationId:
          type: string
        stationName:
          type: string
        fuelType:
          type: string
        currentStock:
          type: number
        minimumLevel:
          type: number
        lastUpdated:
          type: string
          format: date-time
        stockStatus:
          type: string
    InventoryUpdateRequest:
      type: object
      required: [stationId, fuelType, newStock]
      properties:
        stationId:
          type: string
        fuelType:
          type: string
        newStock:
          type: number
    FuelPrice:
      type: object
      properties:
        id:
          type: string
        stationId:
          type: string
        fuelType:
          type: string
          enum: [petrol, diesel, premium]
        price:
          type: number
        validFrom:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        station:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
    CreateFuelPriceRequest:
      type: object
      required: [stationId, fuelType, price]
      properties:
        stationId:
          type: string
        fuelType:
          type: string
          enum: [petrol, diesel, premium]
        price:
          type: number
        validFrom:
          type: string
          format: date-time
    Nozzle:
      type: object
      properties:
        id:
          type: string
        pumpId:
          type: string
        nozzleNumber:
          type: number
        fuelType:
          type: string
          enum: [petrol, diesel, premium]
        status:
          type: string
          enum: [active, inactive, maintenance]
        createdAt:
          type: string
          format: date-time
  CreateNozzleRequest:
    type: object
    required: [pumpId, nozzleNumber, fuelType]
    properties:
      pumpId:
        type: string
      nozzleNumber:
        type: number
      fuelType:
        type: string
        enum: [petrol, diesel, premium]
      status:
        type: string
        enum: [active, inactive, maintenance]
    Pump:
      type: object
      properties:
        id:
          type: string
        stationId:
          type: string
        name:
          type: string
        serialNumber:
          type: string
        status:
          type: string
          enum: [active, inactive, maintenance]
        createdAt:
          type: string
          format: date-time
        nozzleCount:
          type: number
    CreatePumpRequest:
      type: object
      required: [stationId, name, serialNumber]
      properties:
        stationId:
          type: string
        name:
          type: string
        serialNumber:
          type: string
    NozzleReading:
      type: object
      properties:
        id:
          type: string
        nozzleId:
          type: string
        previousReading:
          type: number
        reading:
          type: number
        recordedAt:
          type: string
          format: date-time
        paymentMethod:
          type: string
          enum: [cash, card, upi, credit]
        creditorId:
          type: string
        createdAt:
          type: string
          format: date-time
    CreateReadingRequest:
      type: object
      required: [nozzleId, reading, recordedAt, paymentMethod]
      properties:
        nozzleId:
          type: string
        reading:
          type: number
        recordedAt:
          type: string
          format: date-time
        paymentMethod:
          type: string
          enum: [cash, card, upi, credit]
        creditorId:
          type: string
    ReconciliationRecord:
      type: object
      properties:
        id:
          type: string
        stationId:
          type: string
        date:
          type: string
        totalExpected:
          type: number
        cashReceived:
          type: number
        reconciliationNotes:
          type: string
        managerConfirmation:
          type: boolean
        createdAt:
          type: string
          format: date-time
        station:
          type: object
          properties:
            name:
              type: string
    CreateReconciliationRequest:
      type: object
      required: [stationId, date, totalExpected, cashReceived, managerConfirmation]
      properties:
        stationId:
          type: string
        date:
          type: string
        totalExpected:
          type: number
        cashReceived:
          type: number
        reconciliationNotes:
          type: string
        managerConfirmation:
          type: boolean
    DailyReadingSummary:
      type: object
      properties:
        nozzleId:
          type: string
        nozzleNumber:
          type: number
        previousReading:
          type: number
        currentReading:
          type: number
        deltaVolume:
          type: number
        pricePerLitre:
          type: number
        saleValue:
          type: number
        paymentMethod:
          type: string
        cashDeclared:
          type: number
        fuelType:
          type: string
    SalesReportData:
      type: object
      properties:
        id:
          type: string
        date:
          type: string
        fuelType:
          type: string
          enum: [petrol, diesel, premium]
        volume:
          type: number
        pricePerLitre:
          type: number
        amount:
          type: number
        paymentMethod:
          type: string
          enum: [cash, card, upi, credit]
        attendant:
          type: string
        stationName:
          type: string
        nozzleNumber:
          type: number
    SalesReportSummary:
      type: object
      properties:
        totalVolume:
          type: number
        totalRevenue:
          type: number
        fuelTypeBreakdown:
          type: object
          properties:
            petrol:
              type: object
              properties:
                volume:
                  type: number
                revenue:
                  type: number
            diesel:
              type: object
              properties:
                volume:
                  type: number
                revenue:
                  type: number
            premium:
              type: object
              properties:
                volume:
                  type: number
                revenue:
                  type: number
        paymentMethodBreakdown:
          type: object
          properties:
            cash:
              type: number
            card:
              type: number
            upi:
              type: number
            credit:
              type: number
    ExportReportRequest:
      type: object
      required: [type, format]
      properties:
        type:
          type: string
        format:
          type: string
        stationId:
          type: string
        dateRange:
          type: object
          properties:
            from:
              type: string
              format: date-time
            to:
              type: string
              format: date-time
    ScheduleReportRequest:
      type: object
      required: [type, frequency]
      properties:
        type:
          type: string
        stationId:
          type: string
        frequency:
          type: string
    Sale:
      type: object
      properties:
        id:
          type: string
        nozzleId:
          type: string
        stationId:
          type: string
        volume:
          type: number
        fuelType:
          type: string
          enum: [petrol, diesel, premium]
        fuelPrice:
          type: number
        amount:
          type: number
        paymentMethod:
          type: string
          enum: [cash, card, upi, credit]
        creditorId:
          type: string
        status:
          type: string
          enum: [draft, posted]
        recordedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        station:
          type: object
          properties:
            name:
              type: string
        nozzle:
          type: object
          properties:
            nozzleNumber:
              type: number
            fuelType:
              type: string
    Station:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        status:
          type: string
          enum: [active, inactive, maintenance]
        manager:
          type: string
        attendantCount:
          type: number
        pumpCount:
          type: number
        createdAt:
          type: string
          format: date-time
    CreateStationRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
        address:
          type: string
    UpdateStationRequest:
      type: object
      properties:
        name:
          type: string
    SuperAdminSummary:
      type: object
      properties:
        totalTenants:
          type: number
        activeTenants:
          type: number
        totalPlans:
          type: number
        totalAdminUsers:
          type: number
        totalUsers:
          type: number
        totalStations:
          type: number
        signupsThisMonth:
          type: number
        recentTenants:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              createdAt:
                type: string
                format: date-time
              status:
                type: string
                enum: [active, suspended, cancelled]
        tenantsByPlan:
          type: array
          items:
            type: object
            properties:
              planName:
                type: string
              count:
                type: number
              percentage:
                type: number
    Plan:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        maxStations:
          type: number
        maxPumpsPerStation:
          type: number
        maxNozzlesPerPump:
          type: number
        priceMonthly:
          type: number
        priceYearly:
          type: number
        features:
          type: array
          items:
            type: string
    CreatePlanRequest:
      type: object
      required: [name, maxStations, maxPumpsPerStation, maxNozzlesPerPump, priceMonthly, priceYearly, features]
      properties:
        name:
          type: string
        maxStations:
          type: number
        maxPumpsPerStation:
          type: number
        maxNozzlesPerPump:
          type: number
        priceMonthly:
          type: number
        priceYearly:
          type: number
        features:
          type: array
          items:
            type: string
    AdminUser:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [superadmin]
        createdAt:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time
    CreateAdminUserRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    Tenant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        planId:
          type: string
        planName:
          type: string
        status:
          type: string
          enum: [active, suspended, cancelled]
        createdAt:
          type: string
          format: date-time
        stationCount:
          type: number
        userCount:
          type: number
    CreateTenantRequest:
      type: object
      required: [name, planId]
      properties:
        name:
          type: string
        planId:
          type: string
        adminEmail:
          type: string
        adminPassword:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [superadmin, owner, manager, attendant]
        tenantId:
          type: string
        tenantName:
          type: string
        stationId:
          type: string
        stationName:
          type: string
        createdAt:
          type: string
          format: date-time
    CreateUserRequest:
      type: object
      required: [name, email, password, role]
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [manager, attendant]
        stationId:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        role:
          type: string
          enum: [manager, attendant]
        stationId:
          type: string
    ChangePasswordRequest:
      type: object
      required: [currentPassword, newPassword]
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
    ResetPasswordRequest:
      type: object
      required: [newPassword]
      properties:
        newPassword:
          type: string
    HourlySalesMetric:
      type: object
      properties:
        hour:
          type: string
          format: date-time
        salesVolume:
          type: number
        salesAmount:
          type: number
    PeakHourMetric:
      type: object
      properties:
        hour:
          type: string
        salesVolume:
          type: number
    FuelPerformanceMetric:
      type: object
      properties:
        fuelType:
          type: string
        totalSalesVolume:
          type: number
        totalSalesAmount:
          type: number
    PriceValidation:
      type: object
      properties:
        missing:
          type: array
          items:
            type: string
        outdated:
          type: array
          items:
            type: object
            properties:
              fuelType:
                type: string
              validFrom:
                type: string
                format: date-time
    StationMissingPrice:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        missing:
          type: array
          items:
            type: string

    CreateAlertRequest:
      type: object
      required: [alertType, message]
      properties:
        stationId:
          type: string
        alertType:
          type: string
        message:
          type: string
        severity:
          type: string
          enum: [info, warning, critical]

    AlertSummary:
      type: object
      additionalProperties:
        type: number
